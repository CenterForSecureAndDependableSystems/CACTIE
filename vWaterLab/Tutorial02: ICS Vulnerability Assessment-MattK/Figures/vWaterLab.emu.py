#!/usr/bin/env python
# Author: Matt Kirkland, University of Idaho, CS Department
# Purpose: This code simulates the behavior of the hardware used
#          in the 'vWaterLab' I/O Layer. This models the behavior
#          and communicates over MODBUS to two virtual PLCs.

from pymodbus.client.async import ModbusTcpClient
from pymodbus.exceptions import ModbusIOException
from time import sleep

# variables
PLCa = ModbusTcpClient('192.168.3.8')
PLCb = ModbusTcpClient('192.168.3.9')
TankCapacity = 300
ON = 1
OFF = 0

# functions
# get hardware values
def getVal(client,type,offset):
    if (type): #coil read
    while True:
        value = client.read_coils(offset,1)
        if isinstance(value,ModbusIOException):
            sleep(0.1)
        else:
            return value.bits[0]
    else: #input register read
    while True:
        value.client.read_holding_registers(offset,1)
        if isinstance(value,ModbusIOException):
            sleep(0.1)
        else:
            return value.registers[0]
    return value

# set hardware values
def setVal(client,type,offset,val):
    if (type): #coil write
        client.write_coil(offset,int(val))
    else: #input register write
        client.write_register(offset,int(val))
        
# hardware definition and initialization [offset,coil?(bool),initial value]
# define PLC A hardware
in_valve = [0,True,OFF] #'input tank' input valve (coil)
in_pump = [1,True,OFF] #'input tank' output pump (coil)
in_water_lvl = [0,False,TankCapacity*0.75] #'input tank' water level (register)

# define PLC B hardware
chl_in_valve = [0,True,OFF] #'chlorine tank' input valve (coil)
chl_ou_valve = [1,True,OFF] #'chlorine tank' output valve (coil)
chl_level = [1,False,TankCapacity*0.25] #'chlorine tank' (register)
ht_pump = [2,True,OFF] #'holding tank' output pump (coil)
ht_chl_ppm = [2,False,2] #'holding tank' CHL content in PPM (register)
ht_water_lvl = [0,False,0] #'holding tank' water level (register)

# main function
while True:
    # get current state of I/O from PLC A
    in_valve[2] = getVal(PLCa,in_valve[1],in_valve[0])
    in_pump[2] = getVal(PLCa,in_pump[1],in_pump[0])
    in_water_lvl[2] = getVal(PLCa,in_water_lvl[1],in_water_lvl[0])
    
    # get current state of I/O from PLC B
    chl_in_valve[2] = getVal(PLCb,chl_in_valve[1],chl_in_valve[0])
    chl_ou_valve[2] = getVal(PLCb,chl_ou_valve[1],chl_ou_valve[0])
    chl_level[2] = getVal(PLCb,chl_level[1],chl_level[0])
    ht_pump[2] = getVal(PLCb,ht_pump[1],ht_pump[0])
    ht_chl_ppm[2] = getVal(PLCb,ht_chl_ppm[1],ht_chl_ppm[0])
    ht_water_lvl[2] = getVal(PLCb,ht_water_lvl[1],ht_water_lvl[0])
    
    # update values (pre-coded behavior)
    # update 'input tank' water level
    if (in_valve[2] is ON and in_pump[2] is OFF):
        in_water_lvl[2] += 1
    elif (in_valve[2] is OFF and in_pump[2] is ON):
        in_water_lvl[2] -= 1
    # update 'chlorine tank' level
    if chl_in_valve[2] is ON and chl_ou_valve[2] is OFF):
        chl_level[2] += 1
    elif (chl_in_valve[2] is OFF and chl_ou_valve[2] is ON):
        chl_level[2] -= 1
    # update 'holding tank' level
    if (in_pump[2] is ON and chl_ou_valve[2] is ON and ht_pump[2] is OFF):
        ht_water_lvl[2] += 2
    elif ((in_pump[2] is ON or chl_ou_valve[2] is ON) and ht_pump[2] is OFF):
        ht_water_lvl[2] += 1
    elif (in_pump[2] is OFF and chl_ou_valve[2] is OFF and ht_pump[2] is ON):
        ht_water_lvl[2] -= 1
    # update chlorine concentration
    if (in_pump[2] is OFF and chl_ou_valve[2] is ON):
        ht_chl_ppm[2] += 1
    elif (in_pump[2] is ON and chl_ou_valve[2] is OFF):
        ht_chl_ppm[2] -= 1   
    # check if any tank is at it's max threshold
    if (in_water_lvl[2] >= TankCapacity):
        in_water_lvl[2] = TankCapacity
    if (chl_level[2] >= TankCapacity):
        chl_level[2] = TankCapacity
    if (ht_water_lvl[2] >= TankCapacity):
        ht_water_lvl[2] = TankCapacity
    # check if any tank is empty
    if (in_water_lvl[2] < 1):
        in_water_lvl[2] = 0
        in_pump[2] = OFF
    if (chl_level[2] < 1):
        chl_level[2] = 0
        chl_in_valve[2] = OFF
    if (ht_water_lvl[2] < 1):
        ht_water_lvl[2] = 0
        ht_pump[2] = OFF
    # update chlorine concentration
    if (ht_chl_ppm[2] < 1):
        ht_chl_ppm[2] = 0
    elif (ht_chl_ppm[2] > 99):
        ht_chl_ppm[2] = 100
        
    # write new I/O states to PLC A
    setVal(PLCa,in_valve[1],in_valve[0],in_valve[2])
    setVal(PLCa,in_pump[1],in_pump[0],in_pump[2])
    setVal(PLCa,in_water_lvl[1],in_water_lvl[0],in_water_lvl[2])
    
    # write new I/O states to PLC B
    setVal(PLCb,chl_in_valve[1],chl_in_valve[0],chl_in_valve[2])
    setVal(PLCb,chl_ou_valve[1],chl_ou_valve[0],chl_ou_valve[2])
    setVal(PLCb,chl_level[1],chl_level[0],chl_level[2])
    setVal(PLCb,ht_pump[1],ht_pump[0],ht_pump[2])
    setVal(PLCb,ht_chl_ppm[1],ht_chl_ppm[0],ht_chl_ppm[2])
    setVal(PLCb,ht_water_lvl[1],ht_water_lvl[0],ht_water_lvl[2])
    
    # execute every 1/2 second
    sleep(0.5)
PLCa.close()
PLCb.close()